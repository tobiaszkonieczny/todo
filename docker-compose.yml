services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: todo_user
      POSTGRES_PASSWORD: todo_pass
      POSTGRES_DB: todo_db
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
    volumes:
      - ./backend/migrations/001_init.sql:/docker-entrypoint-initdb.d/init.sql #Initialize the database with a script
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-net

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"   
    depends_on:
      - db
    networks:
      - app-net

  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_USER=todo_user
      - DB_PASSWORD=todo_pass
      - DB_NAME=todo_db
      - DB_PORT=5432
    networks:
      - app-net

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf # We map our custom config file to the container
      - ./nginx/certs:/etc/nginx/certs #The same for the certificates
    depends_on:
      - api # We make sure the api service is started before nginx
    networks:
      - app-net
      # We connect nginx to the same network as the api service
      # This way, nginx can access the api service by its service name
      #instead of using localhost or an IP address


volumes:
  pgdata:

networks:
  app-net:
    driver: bridge

